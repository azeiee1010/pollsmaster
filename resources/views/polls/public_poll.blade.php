@extends('layouts.app')

@section('content')
    <!-- Animated Background Particles -->
    <div class="particles">
        <!-- Particles will be generated by JavaScript -->
    </div>

    <div class="container py-5">
        <div class="row justify-content-center">
            <div class="col-lg-8">
                <div id="poll-area" class="glass-card poll-container fade-in">
                    <!-- Poll Header -->
                    <div class="poll-header text-center mb-4">
                        <h1 id="poll-question" class="poll-title mb-3">Loading...</h1>
                        <p id="poll-description" class="poll-description mb-4"></p>

                        <!-- Total Votes Display -->
                        <div id="total-votes-container" class="total-votes-badge" style="display: none;">
                            <i class="fas fa-users me-2"></i>
                            <span id="total-votes">0</span> Total Votes
                        </div>
                    </div>

                    <!-- Options/Results Container -->
                    <div id="options-container" class="options-grid">
                        <!-- Loading spinner -->
                        <div class="loading-spinner text-center">
                            <div class="spinner-border text-white mb-3" role="status" style="width: 3rem; height: 3rem;">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="text-white mb-0 fw-bold">Loading poll options...</p>
                        </div>
                    </div>

                    <!-- Back Button -->
                    <div class="text-center mt-4">
                        <a href="javascript:history.back()" class="btn-glass btn-primary-glass">
                            <i class="fas fa-arrow-left"></i>
                            Back to Polls
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Enhanced Styles with Dashboard Theme -->
    <style>
        :root {
            --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --poll-gradient: linear-gradient(135deg, #ff6b6b 0%, #4ecdc4 50%, #45b7d1 100%);
            --success-gradient: linear-gradient(135deg, #56ab2f 0%, #a8e6cf 100%);
            --danger-gradient: linear-gradient(135deg, #ff416c 0%, #ff4b2b 100%);
            --info-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --glass-bg: rgba(255, 255, 255, 0.15);
            --glass-border: rgba(255, 255, 255, 0.25);
            --text-primary: #2c3e50;
            --text-secondary: #7f8c8d;
            --card-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 25%, #ff6b6b 50%, #4ecdc4 75%, #45b7d1 100%);
            background-size: 400% 400%;
            animation: gradientFlow 15s ease infinite;
            min-height: 100vh;
            position: relative;
            overflow-x: hidden;
        }

        @keyframes gradientFlow {
            0% {
                background-position: 0% 50%;
            }

            50% {
                background-position: 100% 50%;
            }

            100% {
                background-position: 0% 50%;
            }
        }

        /* Animated Background Particles */
        .particles {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 1;
        }

        .particle {
            position: absolute;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            animation: float 8s ease-in-out infinite;
        }

        .particle:nth-child(odd) {
            animation-direction: reverse;
            background: rgba(255, 107, 107, 0.1);
        }

        .particle:nth-child(3n) {
            background: rgba(78, 205, 196, 0.1);
        }

        @keyframes float {

            0%,
            100% {
                transform: translateY(0px) rotate(0deg);
            }

            33% {
                transform: translateY(-40px) rotate(120deg);
            }

            66% {
                transform: translateY(-80px) rotate(240deg);
            }
        }

        /* Container styling */
        .container {
            position: relative;
            z-index: 2;
        }

        /* Glass morphism effects */
        .glass-card {
            background: var(--glass-bg);
            backdrop-filter: blur(20px);
            border: 1px solid var(--glass-border);
            border-radius: 20px;
            box-shadow: var(--card-shadow);
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        }

        .glass-card:hover {
            transform: translateY(-8px);
            box-shadow: 0 12px 40px rgba(31, 38, 135, 0.5);
            border-color: rgba(255, 255, 255, 0.4);
        }

        /* Poll Container */
        .poll-container {
            padding: 3rem;
            position: relative;
            overflow: hidden;
        }

        .poll-container::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: var(--poll-gradient);
            border-radius: 20px 20px 0 0;
        }

        /* Poll Header */
        .poll-title {
            font-size: 2.5rem;
            font-weight: 900;
            background: linear-gradient(135deg, #ffffff 0%, #f8f9ff 50%, #e3f2fd 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            text-shadow: 0 0 30px rgba(255, 255, 255, 0.5);
            animation: titleGlow 3s ease-in-out infinite alternate;
            line-height: 1.2;
        }

        @keyframes titleGlow {
            from {
                text-shadow: 0 0 20px rgba(255, 255, 255, 0.5);
                transform: scale(1);
            }

            to {
                text-shadow: 0 0 40px rgba(255, 255, 255, 0.8), 0 0 60px rgba(255, 255, 255, 0.4);
                transform: scale(1.02);
            }
        }

        .poll-description {
            color: rgba(255, 255, 255, 0.9);
            font-size: 1.2rem;
            line-height: 1.6;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        }

        /* Total Votes Badge */
        .total-votes-badge {
            display: inline-block;
            padding: 1rem 2rem;
            background: var(--poll-gradient);
            color: white;
            border-radius: 50px;
            font-size: 1.1rem;
            font-weight: 700;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
            animation: pulse 2s infinite;
        }

        @keyframes pulse {

            0%,
            100% {
                transform: scale(1);
                box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
            }

            50% {
                transform: scale(1.05);
                box-shadow: 0 12px 35px rgba(0, 0, 0, 0.3);
            }
        }

        /* Options Grid */
        .options-grid {
            max-width: 600px;
            margin: 0 auto;
        }

        /* Option Buttons */
        .option-button {
            background: var(--glass-bg);
            backdrop-filter: blur(15px);
            border: 2px solid var(--glass-border);
            color: white;
            padding: 1.5rem 2rem;
            border-radius: 15px;
            font-weight: 600;
            font-size: 1.1rem;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
            margin-bottom: 1rem;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

        .option-button::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
            transition: left 0.6s;
        }

        .option-button:hover::before {
            left: 100%;
        }

        .option-button:hover {
            transform: translateY(-5px) scale(1.02);
            border-color: white;
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.3);
            color: white;
            background: rgba(255, 255, 255, 0.2);
        }

        .option-button:active {
            transform: translateY(-2px) scale(1.01);
        }

        /* Results Display */
        .result-item {
            background: var(--glass-bg);
            backdrop-filter: blur(15px);
            border: 1px solid var(--glass-border);
            border-radius: 15px;
            padding: 1.5rem;
            margin-bottom: 1rem;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            animation: slideInUp 0.6s cubic-bezier(0.4, 0, 0.2, 1);
        }

        .result-option-text {
            color: white;
            font-weight: 700;
            font-size: 1.2rem;
            margin-bottom: 1rem;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        }

        .result-progress {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            height: 15px;
            overflow: hidden;
            box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.2);
        }

        .result-progress-bar {
            background: var(--poll-gradient);
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 700;
            font-size: 0.9rem;
            transition: width 1s cubic-bezier(0.4, 0, 0.2, 1);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
            position: relative;
            overflow: hidden;
        }

        .result-progress-bar::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
            animation: shimmer 2s infinite;
        }

        @keyframes shimmer {
            0% {
                left: -100%;
            }

            100% {
                left: 100%;
            }
        }

        /* Button styles */
        .btn-glass {
            background: var(--glass-bg);
            backdrop-filter: blur(10px);
            border: 1px solid var(--glass-border);
            color: white;
            padding: 12px 30px;
            border-radius: 50px;
            font-weight: 600;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

        .btn-glass::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
            transition: left 0.6s;
        }

        .btn-glass:hover::before {
            left: 100%;
        }

        .btn-glass:hover {
            transform: translateY(-3px);
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.3);
            color: white;
        }

        .btn-primary-glass {
            background: var(--poll-gradient);
            border: none;
        }

        /* Loading animations */
        .fade-in {
            animation: fadeInUp 0.8s ease-out forwards;
            opacity: 0;
        }

        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(50px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes slideInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Loading Spinner */
        .loading-spinner {
            padding: 2rem;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .poll-container {
                padding: 2rem 1.5rem;
            }

            .poll-title {
                font-size: 2rem;
            }

            .poll-description {
                font-size: 1rem;
            }

            .option-button {
                padding: 1.2rem 1.5rem;
                font-size: 1rem;
            }

            .total-votes-badge {
                padding: 0.8rem 1.5rem;
                font-size: 1rem;
            }
        }
    </style>
@endsection

@push('scripts')
    <script>
        $(document).ready(function() {
            // Generate animated particles
            function createParticles() {
                const particlesContainer = document.querySelector('.particles');
                const particleCount = 50;

                for (let i = 0; i < particleCount; i++) {
                    const particle = document.createElement('div');
                    particle.className = 'particle';

                    // Random size between 4px and 12px
                    const size = Math.random() * 8 + 4;
                    particle.style.width = size + 'px';
                    particle.style.height = size + 'px';

                    // Random position
                    particle.style.left = Math.random() * 100 + '%';
                    particle.style.top = Math.random() * 100 + '%';

                    // Random animation duration
                    particle.style.animationDuration = (Math.random() * 10 + 5) + 's';
                    particle.style.animationDelay = Math.random() * 5 + 's';

                    particlesContainer.appendChild(particle);
                }
            }

            // Initialize particles
            createParticles();

            const publicId = "{{ $public_id }}";
            const baseUrl = window.location.origin;
            const csrfToken = "{{ csrf_token() }}";

            // Load Poll Data
            $.ajax({
                url: `${baseUrl}/api/polls/public/${publicId}`,
                method: 'GET',
                success: function(data) {
                    if (data.error) return alert(data.error);

                    $('#poll-question').text(data.poll.question);
                    $('#poll-description').text(data.poll.description);

                    const container = $('#options-container');
                    container.empty();

                    console.log("data", data);

                    if (data.has_voted) {
                        loadResults(publicId); // If already voted, show results directly
                    } else {
                        // Show voting options
                        data.options.forEach((opt, index) => {
                            const button = $(`
                        <button class="btn option-button w-100" data-option-id="${opt.id}" style="animation-delay: ${index * 100}ms;">
                            ${opt.text}
                        </button>
                    `);
                            container.append(button);
                        });

                        $('.option-button').on('click', function() {
                            const optionId = $(this).data('option-id');

                            // Disable all buttons and show loading state
                            $('.option-button').prop('disabled', true).addClass('loading');

                            $.ajax({
                                url: `${baseUrl}/api/polls/${publicId}/vote`,
                                method: 'POST',
                                data: {
                                    option_id: optionId
                                },
                                success: function(res) {
                                    if (res.error) {
                                        alert(res.error);
                                        $('.option-button').prop('disabled', false)
                                            .removeClass('loading');
                                        return;
                                    }
                                    showResults(res
                                    .results); // Show new result after vote
                                },
                                error: function(err) {
                                    alert("Vote failed. Try again.");
                                    $('.option-button').prop('disabled', false)
                                        .removeClass('loading');
                                    console.error(err.responseText);
                                }
                            });
                        });
                    }
                },
                error: function() {
                    alert("Failed to load poll.");
                }
            });

            function loadResults(pollId) {
                console.log("Loading results for poll:", pollId);
                $.ajax({
                    url: `${baseUrl}/api/polls/${pollId}/results`,
                    method: 'GET',
                    success: function(res) {
                        showResults(res.results);
                    },
                    error: function() {
                        alert("Failed to load results.");
                    }
                });
            }

            function showResults(results) {
                const container = $('#options-container');
                container.empty();

                let totalVotes = results.reduce((sum, r) => sum + r.votes, 0);

                // Show total votes
                $('#total-votes').text(totalVotes);
                $('#total-votes-container').fadeIn(500);

                results.forEach((r, index) => {
                    let percent = totalVotes > 0 ? Math.round((r.votes / totalVotes) * 100) : 0;

                    const resultRow = $(`
                <div class="result-item" style="animation-delay: ${index * 150}ms;">
                    <div class="result-option-text">${r.option}</div>
                    <div class="result-progress">
                        <div class="result-progress-bar" role="progressbar" style="width: 0%;">
                            ${percent}% (${r.votes} votes)
                        </div>
                    </div>
                </div>
            `);
                    container.append(resultRow);

                    // Animate progress bar
                    setTimeout(() => {
                        resultRow.find('.result-progress-bar').css('width', `${percent}%`);
                    }, 500 + (index * 150));
                });
            }
        });
    </script>
@endpush
